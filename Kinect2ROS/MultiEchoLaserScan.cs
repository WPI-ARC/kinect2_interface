using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class MultiEchoLaserScan : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "MultiEchoLaserScan";
            public readonly string md5sum = "6fefb0c6da89d7c8abe4b339f5c2f8fb";
            public std_msgs.Header header;
            public float angle_min;
            public float angle_max;
            public float angle_increment;
            public float time_increment;
            public float scan_time;
            public float range_min;
            public float range_max;
            public List<sensor_msgs.LaserEcho> ranges;
            public List<sensor_msgs.LaserEcho> intensities;

            public MultiEchoLaserScan ()
            {
                header = new std_msgs.Header();
                angle_min = 0.0f;
                angle_max = 0.0f;
                angle_increment = 0.0f;
                time_increment = 0.0f;
                scan_time = 0.0f;
                range_min = 0.0f;
                range_max = 0.0f;
                ranges = new List<sensor_msgs.LaserEcho>();
                intensities = new List<sensor_msgs.LaserEcho>();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "angle_min: " + Convert.ToString(angle_min) + "\n";
                string_rep += "angle_max: " + Convert.ToString(angle_max) + "\n";
                string_rep += "angle_increment: " + Convert.ToString(angle_increment) + "\n";
                string_rep += "time_increment: " + Convert.ToString(time_increment) + "\n";
                string_rep += "scan_time: " + Convert.ToString(scan_time) + "\n";
                string_rep += "range_min: " + Convert.ToString(range_min) + "\n";
                string_rep += "range_max: " + Convert.ToString(range_max) + "\n";
                string_rep += "ranges:\n[";
                foreach (sensor_msgs.LaserEcho element in ranges)
                {
                    string_rep += " " + element.ToStringRaw();
                }
                string_rep += "]\n\n";
                string_rep += "intensities:\n[";
                foreach (sensor_msgs.LaserEcho element in intensities)
                {
                    string_rep += " " + element.ToStringRaw();
                }
                string_rep += "]\n\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] angle_min_bytes = BitConverter.GetBytes(angle_min);
                stream.Write(angle_min_bytes, 0, angle_min_bytes.Length);
                System.Byte[] angle_max_bytes = BitConverter.GetBytes(angle_max);
                stream.Write(angle_max_bytes, 0, angle_max_bytes.Length);
                System.Byte[] angle_increment_bytes = BitConverter.GetBytes(angle_increment);
                stream.Write(angle_increment_bytes, 0, angle_increment_bytes.Length);
                System.Byte[] time_increment_bytes = BitConverter.GetBytes(time_increment);
                stream.Write(time_increment_bytes, 0, time_increment_bytes.Length);
                System.Byte[] scan_time_bytes = BitConverter.GetBytes(scan_time);
                stream.Write(scan_time_bytes, 0, scan_time_bytes.Length);
                System.Byte[] range_min_bytes = BitConverter.GetBytes(range_min);
                stream.Write(range_min_bytes, 0, range_min_bytes.Length);
                System.Byte[] range_max_bytes = BitConverter.GetBytes(range_max);
                stream.Write(range_max_bytes, 0, range_max_bytes.Length);
                System.Byte[] ranges_len_bytes = BitConverter.GetBytes((System.UInt32)ranges.Count);
                stream.Write(ranges_len_bytes, 0, ranges_len_bytes.Length);
                foreach(sensor_msgs.LaserEcho element in ranges)
                {
                    element.Serialize(stream);
                }
                System.Byte[] intensities_len_bytes = BitConverter.GetBytes((System.UInt32)intensities.Count);
                stream.Write(intensities_len_bytes, 0, intensities_len_bytes.Length);
                foreach(sensor_msgs.LaserEcho element in intensities)
                {
                    element.Serialize(stream);
                }
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                angle_min = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(angle_min).Length;
                angle_max = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(angle_max).Length;
                angle_increment = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(angle_increment).Length;
                time_increment = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(time_increment).Length;
                scan_time = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(scan_time).Length;
                range_min = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(range_min).Length;
                range_max = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(range_max).Length;
                System.UInt32 ranges_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(ranges_len).Length;
                for (int i = 0; i < (int)ranges_len; i++)
                {
                    sensor_msgs.LaserEcho element = new sensor_msgs.LaserEcho();
                    curIndex += element.Deserialize(serialized, curIndex);
                    ranges.Add(element);
                }
                System.UInt32 intensities_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(intensities_len).Length;
                for (int i = 0; i < (int)intensities_len; i++)
                {
                    sensor_msgs.LaserEcho element = new sensor_msgs.LaserEcho();
                    curIndex += element.Deserialize(serialized, curIndex);
                    intensities.Add(element);
                }
                return (curIndex - startIndex);
            }

        }
    }
}
