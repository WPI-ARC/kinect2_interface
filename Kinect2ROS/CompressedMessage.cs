using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace teleop_msgs
    {
        public class CompressedMessage : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "CompressedMessage";
            public readonly string md5sum = "bc834d4f06e0fa6e55a4cbfa48623260";
            public List<System.Byte> CompressedMessageData;

            public CompressedMessage ()
            {
                CompressedMessageData = new List<System.Byte>();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "CompressedMessageData:\n[";
                foreach (System.Byte element in CompressedMessageData)
                {
                    string_rep += " " + Convert.ToString(element);
                }
                string_rep += "]\n\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] CompressedMessageData_bytes = CompressedMessageData.ToArray();
                System.Byte[] CompressedMessageData_len_bytes = BitConverter.GetBytes((System.UInt32)CompressedMessageData_bytes.Length);
                stream.Write(CompressedMessageData_len_bytes, 0, CompressedMessageData_len_bytes.Length);
                stream.Write(CompressedMessageData_bytes, 0, CompressedMessageData_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                System.UInt32 CompressedMessageData_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(CompressedMessageData_len).Length;
                System.Byte[] temp = new System.Byte[CompressedMessageData_len];
                Array.Copy(serialized, curIndex, temp, 0, CompressedMessageData_len);
                CompressedMessageData = temp.ToList();
                curIndex += (int)CompressedMessageData_len;
                return (curIndex - startIndex);
            }

        }
    }
}
