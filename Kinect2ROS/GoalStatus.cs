using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace actionlib_msgs
    {
        public class GoalStatus : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "GoalStatus";
            public readonly string md5sum = "d388f9b87b3c471f784434d671988d4a";
            public actionlib_msgs.GoalID goal_id;
            public System.Byte status;
            public readonly System.Byte PENDING = 0;
            public readonly System.Byte ACTIVE = 1;
            public readonly System.Byte PREEMPTED = 2;
            public readonly System.Byte SUCCEEDED = 3;
            public readonly System.Byte ABORTED = 4;
            public readonly System.Byte REJECTED = 5;
            public readonly System.Byte PREEMPTING = 6;
            public readonly System.Byte RECALLING = 7;
            public readonly System.Byte RECALLED = 8;
            public readonly System.Byte LOST = 9;
            public string text;

            public GoalStatus ()
            {
                goal_id = new actionlib_msgs.GoalID();
                status = 0;
                text = "";
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += goal_id.ToStringRaw() + "\n";
                string_rep += "status: " + Convert.ToString(status) + "\n";
                string_rep += "text: " + text + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                goal_id.Serialize(stream);
                System.Byte[] status_bytes = new System.Byte[] {status};
                stream.Write(status_bytes, 0, status_bytes.Length);
                System.Byte[] text_bytes = System.Text.Encoding.UTF8.GetBytes(text);
                System.Byte[] text_len_bytes = BitConverter.GetBytes((System.UInt32)text_bytes.Length);
                stream.Write(text_len_bytes, 0, text_len_bytes.Length);
                stream.Write(text_bytes, 0, text_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += goal_id.Deserialize(serialized, curIndex);
                status = serialized[curIndex];
                curIndex++;
                System.UInt32 text_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(text_len).Length;
                text = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)text_len);
                curIndex += (int)text_len;
                return (curIndex - startIndex);
            }

        }
    }
}
