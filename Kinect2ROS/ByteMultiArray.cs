using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace std_msgs
    {
        public class ByteMultiArray : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "ByteMultiArray";
            public readonly string md5sum = "70ea476cbcfd65ac2f68f3cda1e891fe";
            public std_msgs.MultiArrayLayout layout;
            public List<System.Byte> data;

            public ByteMultiArray ()
            {
                layout = new std_msgs.MultiArrayLayout();
                data = new List<System.Byte>();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += layout.ToStringRaw() + "\n";
                string_rep += "data:\n[";
                foreach (System.Byte element in data)
                {
                    string_rep += " " + Convert.ToString(element);
                }
                string_rep += "]\n\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                layout.Serialize(stream);
                System.Byte[] data_bytes = data.ToArray();
                System.Byte[] data_len_bytes = BitConverter.GetBytes((System.UInt32)data_bytes.Length);
                stream.Write(data_len_bytes, 0, data_len_bytes.Length);
                stream.Write(data_bytes, 0, data_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += layout.Deserialize(serialized, curIndex);
                System.UInt32 data_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(data_len).Length;
                System.Byte[] temp = new System.Byte[data_len];
                Array.Copy(serialized, curIndex, temp, 0, data_len);
                data = temp.ToList();
                curIndex += (int)data_len;
                return (curIndex - startIndex);
            }

        }
    }
}
