using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class NavSatFix : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "NavSatFix";
            public readonly string md5sum = "2d3a8cd499b9b4a0249fb98fd05cfa48";
            public std_msgs.Header header;
            public sensor_msgs.NavSatStatus status;
            public double latitude;
            public double longitude;
            public double altitude;
            public double[] position_covariance;
            public readonly System.Byte COVARIANCE_TYPE_UNKNOWN = 0;
            public readonly System.Byte COVARIANCE_TYPE_APPROXIMATED = 1;
            public readonly System.Byte COVARIANCE_TYPE_DIAGONAL_KNOWN = 2;
            public readonly System.Byte COVARIANCE_TYPE_KNOWN = 3;
            public System.Byte position_covariance_type;

            public NavSatFix ()
            {
                header = new std_msgs.Header();
                status = new sensor_msgs.NavSatStatus();
                latitude = 0.0;
                longitude = 0.0;
                altitude = 0.0;
                position_covariance = new double[9];
                position_covariance_type = 0;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += status.ToStringRaw() + "\n";
                string_rep += "latitude: " + Convert.ToString(latitude) + "\n";
                string_rep += "longitude: " + Convert.ToString(longitude) + "\n";
                string_rep += "altitude: " + Convert.ToString(altitude) + "\n";
                string_rep += "position_covariance: " + position_covariance + "\n";
                string_rep += "position_covariance_type: " + Convert.ToString(position_covariance_type) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                status.Serialize(stream);
                System.Byte[] latitude_bytes = BitConverter.GetBytes(latitude);
                stream.Write(latitude_bytes, 0, latitude_bytes.Length);
                System.Byte[] longitude_bytes = BitConverter.GetBytes(longitude);
                stream.Write(longitude_bytes, 0, longitude_bytes.Length);
                System.Byte[] altitude_bytes = BitConverter.GetBytes(altitude);
                stream.Write(altitude_bytes, 0, altitude_bytes.Length);
                foreach(double element in position_covariance)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
                System.Byte[] position_covariance_type_bytes = new System.Byte[] {position_covariance_type};
                stream.Write(position_covariance_type_bytes, 0, position_covariance_type_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                curIndex += status.Deserialize(serialized, curIndex);
                latitude = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(latitude).Length;
                longitude = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(longitude).Length;
                altitude = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(altitude).Length;
                for (int i = 0; i < (int)position_covariance.Length; i++)
                {
                    position_covariance[i] = BitConverter.ToDouble(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(position_covariance[i]).Length;
                }
                position_covariance_type = serialized[curIndex];
                curIndex++;
                return (curIndex - startIndex);
            }

        }
    }
}
