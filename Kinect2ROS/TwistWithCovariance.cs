using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace geometry_msgs
    {
        public class TwistWithCovariance : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "TwistWithCovariance";
            public readonly string md5sum = "1fe8a28e6890a4cc3ae4c3ca5c7d82e6";
            public geometry_msgs.Twist twist;
            public double[] covariance;

            public TwistWithCovariance ()
            {
                twist = new geometry_msgs.Twist();
                covariance = new double[36];
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += twist.ToStringRaw() + "\n";
                string_rep += "covariance: " + covariance + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                twist.Serialize(stream);
                foreach(double element in covariance)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += twist.Deserialize(serialized, curIndex);
                for (int i = 0; i < (int)covariance.Length; i++)
                {
                    covariance[i] = BitConverter.ToDouble(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(covariance[i]).Length;
                }
                return (curIndex - startIndex);
            }

        }
    }
}
