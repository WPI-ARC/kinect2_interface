using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class ChannelFloat32 : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "ChannelFloat32";
            public readonly string md5sum = "3d40139cdd33dfedcb71ffeeeb42ae7f";
            public string name;
            public List<float> values;

            public ChannelFloat32 ()
            {
                name = "";
                values = new List<float>();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "name: " + name + "\n";
                string_rep += "values:\n[";
                foreach (float element in values)
                {
                    string_rep += " " + Convert.ToString(element);
                }
                string_rep += "]\n\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] name_bytes = System.Text.Encoding.UTF8.GetBytes(name);
                System.Byte[] name_len_bytes = BitConverter.GetBytes((System.UInt32)name_bytes.Length);
                stream.Write(name_len_bytes, 0, name_len_bytes.Length);
                stream.Write(name_bytes, 0, name_bytes.Length);
                System.Byte[] values_len_bytes = BitConverter.GetBytes((System.UInt32)values.Count);
                stream.Write(values_len_bytes, 0, values_len_bytes.Length);
                foreach(float element in values)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                System.UInt32 name_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(name_len).Length;
                name = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)name_len);
                curIndex += (int)name_len;
                System.UInt32 values_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(values_len).Length;
                for (int i = 0; i < (int)values_len; i++)
                {
                    float element = BitConverter.ToSingle(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(element).Length;
                    values.Add(element);
                }
                return (curIndex - startIndex);
            }

        }
    }
}
