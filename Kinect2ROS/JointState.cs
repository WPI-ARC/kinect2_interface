using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class JointState : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "JointState";
            public readonly string md5sum = "3066dcd76a6cfaef579bd0f34173e9fd";
            public std_msgs.Header header;
            public List<string> name;
            public List<double> position;
            public List<double> velocity;
            public List<double> effort;

            public JointState ()
            {
                header = new std_msgs.Header();
                name = new List<string>();
                position = new List<double>();
                velocity = new List<double>();
                effort = new List<double>();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "name:\n[";
                foreach (string element in name)
                {
                    string_rep += " " + element;
                }
                string_rep += "]\n\n";
                string_rep += "position:\n[";
                foreach (double element in position)
                {
                    string_rep += " " + Convert.ToString(element);
                }
                string_rep += "]\n\n";
                string_rep += "velocity:\n[";
                foreach (double element in velocity)
                {
                    string_rep += " " + Convert.ToString(element);
                }
                string_rep += "]\n\n";
                string_rep += "effort:\n[";
                foreach (double element in effort)
                {
                    string_rep += " " + Convert.ToString(element);
                }
                string_rep += "]\n\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] name_len_bytes = BitConverter.GetBytes((System.UInt32)name.Count);
                stream.Write(name_len_bytes, 0, name_len_bytes.Length);
                foreach(string element in name)
                {
                    System.Byte[] element_bytes = System.Text.Encoding.UTF8.GetBytes(element);
                    System.Byte[] element_len_bytes = BitConverter.GetBytes((System.UInt32)element_bytes.Length);
                    stream.Write(element_len_bytes, 0, element_len_bytes.Length);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
                System.Byte[] position_len_bytes = BitConverter.GetBytes((System.UInt32)position.Count);
                stream.Write(position_len_bytes, 0, position_len_bytes.Length);
                foreach(double element in position)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
                System.Byte[] velocity_len_bytes = BitConverter.GetBytes((System.UInt32)velocity.Count);
                stream.Write(velocity_len_bytes, 0, velocity_len_bytes.Length);
                foreach(double element in velocity)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
                System.Byte[] effort_len_bytes = BitConverter.GetBytes((System.UInt32)effort.Count);
                stream.Write(effort_len_bytes, 0, effort_len_bytes.Length);
                foreach(double element in effort)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                System.UInt32 name_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(name_len).Length;
                for (int i = 0; i < (int)name_len; i++)
                {
                    System.UInt32 element_len = BitConverter.ToUInt32(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(element_len).Length;
                    string element = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)element_len);
                    curIndex += (int)element_len;
                    name.Add(element);
                }
                System.UInt32 position_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(position_len).Length;
                for (int i = 0; i < (int)position_len; i++)
                {
                    double element = BitConverter.ToDouble(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(element).Length;
                    position.Add(element);
                }
                System.UInt32 velocity_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(velocity_len).Length;
                for (int i = 0; i < (int)velocity_len; i++)
                {
                    double element = BitConverter.ToDouble(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(element).Length;
                    velocity.Add(element);
                }
                System.UInt32 effort_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(effort_len).Length;
                for (int i = 0; i < (int)effort_len; i++)
                {
                    double element = BitConverter.ToDouble(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(element).Length;
                    effort.Add(element);
                }
                return (curIndex - startIndex);
            }

        }
    }
}
