using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace teleop_msgs
    {
        public class SerializedMessage : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "SerializedMessage";
            public readonly string md5sum = "1882ea7755bcb9fa4d57e746030b0baf";
            public string TopicName;
            public string TopicType;
            public List<System.Byte> SerializedMessageData;

            public SerializedMessage ()
            {
                TopicName = "";
                TopicType = "";
                SerializedMessageData = new List<System.Byte>();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "TopicName: " + TopicName + "\n";
                string_rep += "TopicType: " + TopicType + "\n";
                string_rep += "SerializedMessageData:\n[";
                foreach (System.Byte element in SerializedMessageData)
                {
                    string_rep += " " + Convert.ToString(element);
                }
                string_rep += "]\n\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] TopicName_bytes = System.Text.Encoding.UTF8.GetBytes(TopicName);
                System.Byte[] TopicName_len_bytes = BitConverter.GetBytes((System.UInt32)TopicName_bytes.Length);
                stream.Write(TopicName_len_bytes, 0, TopicName_len_bytes.Length);
                stream.Write(TopicName_bytes, 0, TopicName_bytes.Length);
                System.Byte[] TopicType_bytes = System.Text.Encoding.UTF8.GetBytes(TopicType);
                System.Byte[] TopicType_len_bytes = BitConverter.GetBytes((System.UInt32)TopicType_bytes.Length);
                stream.Write(TopicType_len_bytes, 0, TopicType_len_bytes.Length);
                stream.Write(TopicType_bytes, 0, TopicType_bytes.Length);
                System.Byte[] SerializedMessageData_bytes = SerializedMessageData.ToArray();
                System.Byte[] SerializedMessageData_len_bytes = BitConverter.GetBytes((System.UInt32)SerializedMessageData_bytes.Length);
                stream.Write(SerializedMessageData_len_bytes, 0, SerializedMessageData_len_bytes.Length);
                stream.Write(SerializedMessageData_bytes, 0, SerializedMessageData_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                System.UInt32 TopicName_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(TopicName_len).Length;
                TopicName = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)TopicName_len);
                curIndex += (int)TopicName_len;
                System.UInt32 TopicType_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(TopicType_len).Length;
                TopicType = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)TopicType_len);
                curIndex += (int)TopicType_len;
                System.UInt32 SerializedMessageData_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(SerializedMessageData_len).Length;
                System.Byte[] temp = new System.Byte[SerializedMessageData_len];
                Array.Copy(serialized, curIndex, temp, 0, SerializedMessageData_len);
                SerializedMessageData = temp.ToList();
                curIndex += (int)SerializedMessageData_len;
                return (curIndex - startIndex);
            }

        }
    }
}
