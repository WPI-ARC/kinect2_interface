using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class Range : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "Range";
            public readonly string md5sum = "c005c34273dc426c67a020a87bc24148";
            public std_msgs.Header header;
            public readonly System.Byte ULTRASOUND = 0;
            public readonly System.Byte INFRARED = 1;
            public System.Byte radiation_type;
            public float field_of_view;
            public float min_range;
            public float max_range;
            public float range;

            public Range ()
            {
                header = new std_msgs.Header();
                radiation_type = 0;
                field_of_view = 0.0f;
                min_range = 0.0f;
                max_range = 0.0f;
                range = 0.0f;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "radiation_type: " + Convert.ToString(radiation_type) + "\n";
                string_rep += "field_of_view: " + Convert.ToString(field_of_view) + "\n";
                string_rep += "min_range: " + Convert.ToString(min_range) + "\n";
                string_rep += "max_range: " + Convert.ToString(max_range) + "\n";
                string_rep += "range: " + Convert.ToString(range) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] radiation_type_bytes = new System.Byte[] {radiation_type};
                stream.Write(radiation_type_bytes, 0, radiation_type_bytes.Length);
                System.Byte[] field_of_view_bytes = BitConverter.GetBytes(field_of_view);
                stream.Write(field_of_view_bytes, 0, field_of_view_bytes.Length);
                System.Byte[] min_range_bytes = BitConverter.GetBytes(min_range);
                stream.Write(min_range_bytes, 0, min_range_bytes.Length);
                System.Byte[] max_range_bytes = BitConverter.GetBytes(max_range);
                stream.Write(max_range_bytes, 0, max_range_bytes.Length);
                System.Byte[] range_bytes = BitConverter.GetBytes(range);
                stream.Write(range_bytes, 0, range_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                radiation_type = serialized[curIndex];
                curIndex++;
                field_of_view = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(field_of_view).Length;
                min_range = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(min_range).Length;
                max_range = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(max_range).Length;
                range = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(range).Length;
                return (curIndex - startIndex);
            }

        }
    }
}
