using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace std_msgs
    {
        public class MultiArrayDimension : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "MultiArrayDimension";
            public readonly string md5sum = "4cd0c83a8683deae40ecdac60e53bfa8";
            public string label;
            public System.UInt32 size;
            public System.UInt32 stride;

            public MultiArrayDimension ()
            {
                label = "";
                size = 0;
                stride = 0;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "label: " + label + "\n";
                string_rep += "size: " + Convert.ToString(size) + "\n";
                string_rep += "stride: " + Convert.ToString(stride) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] label_bytes = System.Text.Encoding.UTF8.GetBytes(label);
                System.Byte[] label_len_bytes = BitConverter.GetBytes((System.UInt32)label_bytes.Length);
                stream.Write(label_len_bytes, 0, label_len_bytes.Length);
                stream.Write(label_bytes, 0, label_bytes.Length);
                System.Byte[] size_bytes = BitConverter.GetBytes(size);
                stream.Write(size_bytes, 0, size_bytes.Length);
                System.Byte[] stride_bytes = BitConverter.GetBytes(stride);
                stream.Write(stride_bytes, 0, stride_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                System.UInt32 label_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(label_len).Length;
                label = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)label_len);
                curIndex += (int)label_len;
                size = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(size).Length;
                stride = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(stride).Length;
                return (curIndex - startIndex);
            }

        }
    }
}
