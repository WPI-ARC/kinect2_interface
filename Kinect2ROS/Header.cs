using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace std_msgs
    {
        public class Header : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "Header";
            public readonly string md5sum = "2176decaecbce78abc3b96ef049fabed";
            public System.UInt32 seq;
            public ROS_CS.Core.Time stamp;
            public string frame_id;

            public Header ()
            {
                seq = 0;
                stamp = new ROS_CS.Core.Time();
                frame_id = "";
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "seq: " + Convert.ToString(seq) + "\n";
                string_rep += stamp.ToStringRaw() + "\n";
                string_rep += "frame_id: " + frame_id + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] seq_bytes = BitConverter.GetBytes(seq);
                stream.Write(seq_bytes, 0, seq_bytes.Length);
                stamp.Serialize(stream);
                System.Byte[] frame_id_bytes = System.Text.Encoding.UTF8.GetBytes(frame_id);
                System.Byte[] frame_id_len_bytes = BitConverter.GetBytes((System.UInt32)frame_id_bytes.Length);
                stream.Write(frame_id_len_bytes, 0, frame_id_len_bytes.Length);
                stream.Write(frame_id_bytes, 0, frame_id_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                seq = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(seq).Length;
                curIndex += stamp.Deserialize(serialized, curIndex);
                System.UInt32 frame_id_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(frame_id_len).Length;
                frame_id = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)frame_id_len);
                curIndex += (int)frame_id_len;
                return (curIndex - startIndex);
            }

        }
    }
}
