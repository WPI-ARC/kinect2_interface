using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class PointCloud : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "PointCloud";
            public readonly string md5sum = "d8e9c3f5afbdd8a130fd1d2763945fca";
            public std_msgs.Header header;
            public List<geometry_msgs.Point32> points;
            public List<sensor_msgs.ChannelFloat32> channels;

            public PointCloud ()
            {
                header = new std_msgs.Header();
                points = new List<geometry_msgs.Point32>();
                channels = new List<sensor_msgs.ChannelFloat32>();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "points:\n[";
                foreach (geometry_msgs.Point32 element in points)
                {
                    string_rep += " " + element.ToStringRaw();
                }
                string_rep += "]\n\n";
                string_rep += "channels:\n[";
                foreach (sensor_msgs.ChannelFloat32 element in channels)
                {
                    string_rep += " " + element.ToStringRaw();
                }
                string_rep += "]\n\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] points_len_bytes = BitConverter.GetBytes((System.UInt32)points.Count);
                stream.Write(points_len_bytes, 0, points_len_bytes.Length);
                foreach(geometry_msgs.Point32 element in points)
                {
                    element.Serialize(stream);
                }
                System.Byte[] channels_len_bytes = BitConverter.GetBytes((System.UInt32)channels.Count);
                stream.Write(channels_len_bytes, 0, channels_len_bytes.Length);
                foreach(sensor_msgs.ChannelFloat32 element in channels)
                {
                    element.Serialize(stream);
                }
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                System.UInt32 points_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(points_len).Length;
                for (int i = 0; i < (int)points_len; i++)
                {
                    geometry_msgs.Point32 element = new geometry_msgs.Point32();
                    curIndex += element.Deserialize(serialized, curIndex);
                    points.Add(element);
                }
                System.UInt32 channels_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(channels_len).Length;
                for (int i = 0; i < (int)channels_len; i++)
                {
                    sensor_msgs.ChannelFloat32 element = new sensor_msgs.ChannelFloat32();
                    curIndex += element.Deserialize(serialized, curIndex);
                    channels.Add(element);
                }
                return (curIndex - startIndex);
            }

        }
    }
}
