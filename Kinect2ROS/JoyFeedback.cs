using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class JoyFeedback : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "JoyFeedback";
            public readonly string md5sum = "f4dcd73460360d98f36e55ee7f2e46f1";
            public readonly System.Byte TYPE_LED = 0;
            public readonly System.Byte TYPE_RUMBLE = 1;
            public readonly System.Byte TYPE_BUZZER = 2;
            public System.Byte type;
            public System.Byte id;
            public float intensity;

            public JoyFeedback ()
            {
                type = 0;
                id = 0;
                intensity = 0.0f;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "type: " + Convert.ToString(type) + "\n";
                string_rep += "id: " + Convert.ToString(id) + "\n";
                string_rep += "intensity: " + Convert.ToString(intensity) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] type_bytes = new System.Byte[] {type};
                stream.Write(type_bytes, 0, type_bytes.Length);
                System.Byte[] id_bytes = new System.Byte[] {id};
                stream.Write(id_bytes, 0, id_bytes.Length);
                System.Byte[] intensity_bytes = BitConverter.GetBytes(intensity);
                stream.Write(intensity_bytes, 0, intensity_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                type = serialized[curIndex];
                curIndex++;
                id = serialized[curIndex];
                curIndex++;
                intensity = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(intensity).Length;
                return (curIndex - startIndex);
            }

        }
    }
}
