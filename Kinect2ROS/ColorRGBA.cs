using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace std_msgs
    {
        public class ColorRGBA : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "ColorRGBA";
            public readonly string md5sum = "a29a96539573343b1310c73607334b00";
            public float r;
            public float g;
            public float b;
            public float a;

            public ColorRGBA ()
            {
                r = 0.0f;
                g = 0.0f;
                b = 0.0f;
                a = 0.0f;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "r: " + Convert.ToString(r) + "\n";
                string_rep += "g: " + Convert.ToString(g) + "\n";
                string_rep += "b: " + Convert.ToString(b) + "\n";
                string_rep += "a: " + Convert.ToString(a) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] r_bytes = BitConverter.GetBytes(r);
                stream.Write(r_bytes, 0, r_bytes.Length);
                System.Byte[] g_bytes = BitConverter.GetBytes(g);
                stream.Write(g_bytes, 0, g_bytes.Length);
                System.Byte[] b_bytes = BitConverter.GetBytes(b);
                stream.Write(b_bytes, 0, b_bytes.Length);
                System.Byte[] a_bytes = BitConverter.GetBytes(a);
                stream.Write(a_bytes, 0, a_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                r = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(r).Length;
                g = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(g).Length;
                b = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(b).Length;
                a = BitConverter.ToSingle(serialized, curIndex);
                curIndex += BitConverter.GetBytes(a).Length;
                return (curIndex - startIndex);
            }

        }
    }
}
