using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class Imu : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "Imu";
            public readonly string md5sum = "6a62c6daae103f4ff57a132d6f95cec2";
            public std_msgs.Header header;
            public geometry_msgs.Quaternion orientation;
            public double[] orientation_covariance;
            public geometry_msgs.Vector3 angular_velocity;
            public double[] angular_velocity_covariance;
            public geometry_msgs.Vector3 linear_acceleration;
            public double[] linear_acceleration_covariance;

            public Imu ()
            {
                header = new std_msgs.Header();
                orientation = new geometry_msgs.Quaternion();
                orientation_covariance = new double[9];
                angular_velocity = new geometry_msgs.Vector3();
                angular_velocity_covariance = new double[9];
                linear_acceleration = new geometry_msgs.Vector3();
                linear_acceleration_covariance = new double[9];
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += orientation.ToStringRaw() + "\n";
                string_rep += "orientation_covariance: " + orientation_covariance + "\n";
                string_rep += angular_velocity.ToStringRaw() + "\n";
                string_rep += "angular_velocity_covariance: " + angular_velocity_covariance + "\n";
                string_rep += linear_acceleration.ToStringRaw() + "\n";
                string_rep += "linear_acceleration_covariance: " + linear_acceleration_covariance + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                orientation.Serialize(stream);
                foreach(double element in orientation_covariance)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
                angular_velocity.Serialize(stream);
                foreach(double element in angular_velocity_covariance)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
                linear_acceleration.Serialize(stream);
                foreach(double element in linear_acceleration_covariance)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                curIndex += orientation.Deserialize(serialized, curIndex);
                for (int i = 0; i < (int)orientation_covariance.Length; i++)
                {
                    orientation_covariance[i] = BitConverter.ToDouble(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(orientation_covariance[i]).Length;
                }
                curIndex += angular_velocity.Deserialize(serialized, curIndex);
                for (int i = 0; i < (int)angular_velocity_covariance.Length; i++)
                {
                    angular_velocity_covariance[i] = BitConverter.ToDouble(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(angular_velocity_covariance[i]).Length;
                }
                curIndex += linear_acceleration.Deserialize(serialized, curIndex);
                for (int i = 0; i < (int)linear_acceleration_covariance.Length; i++)
                {
                    linear_acceleration_covariance[i] = BitConverter.ToDouble(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(linear_acceleration_covariance[i]).Length;
                }
                return (curIndex - startIndex);
            }

        }
    }
}
