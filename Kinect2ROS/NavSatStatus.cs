using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class NavSatStatus : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "NavSatStatus";
            public readonly string md5sum = "331cdbddfa4bc96ffc3b9ad98900a54c";
            public readonly System.SByte STATUS_NO_FIX = -1;
            public readonly System.SByte STATUS_FIX = 0;
            public readonly System.SByte STATUS_SBAS_FIX = 1;
            public readonly System.SByte STATUS_GBAS_FIX = 2;
            public System.SByte status;
            public readonly System.UInt16 SERVICE_GPS = 1;
            public readonly System.UInt16 SERVICE_GLONASS = 2;
            public readonly System.UInt16 SERVICE_COMPASS = 4;
            public readonly System.UInt16 SERVICE_GALILEO = 8;
            public System.UInt16 service;

            public NavSatStatus ()
            {
                status = 0;
                service = 0;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "status: " + Convert.ToString(status) + "\n";
                string_rep += "service: " + Convert.ToString(service) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] status_bytes = BitConverter.GetBytes(status);
                stream.Write(status_bytes, 0, status_bytes.Length);
                System.Byte[] service_bytes = BitConverter.GetBytes(service);
                stream.Write(service_bytes, 0, service_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                status = (System.SByte)serialized[curIndex];
                curIndex++;
                service = BitConverter.ToUInt16(serialized, curIndex);
                curIndex += BitConverter.GetBytes(service).Length;
                return (curIndex - startIndex);
            }

        }
    }
}
