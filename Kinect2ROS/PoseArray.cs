using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace geometry_msgs
    {
        public class PoseArray : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "PoseArray";
            public readonly string md5sum = "916c28c5764443f268b296bb671b9d97";
            public std_msgs.Header header;
            public List<geometry_msgs.Pose> poses;

            public PoseArray ()
            {
                header = new std_msgs.Header();
                poses = new List<geometry_msgs.Pose>();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "poses:\n[";
                foreach (geometry_msgs.Pose element in poses)
                {
                    string_rep += " " + element.ToStringRaw();
                }
                string_rep += "]\n\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] poses_len_bytes = BitConverter.GetBytes((System.UInt32)poses.Count);
                stream.Write(poses_len_bytes, 0, poses_len_bytes.Length);
                foreach(geometry_msgs.Pose element in poses)
                {
                    element.Serialize(stream);
                }
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                System.UInt32 poses_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(poses_len).Length;
                for (int i = 0; i < (int)poses_len; i++)
                {
                    geometry_msgs.Pose element = new geometry_msgs.Pose();
                    curIndex += element.Deserialize(serialized, curIndex);
                    poses.Add(element);
                }
                return (curIndex - startIndex);
            }

        }
    }
}
