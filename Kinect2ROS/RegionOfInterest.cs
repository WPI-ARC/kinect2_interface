using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class RegionOfInterest : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "RegionOfInterest";
            public readonly string md5sum = "bdb633039d588fcccb441a4d43ccfe09";
            public System.UInt32 x_offset;
            public System.UInt32 y_offset;
            public System.UInt32 height;
            public System.UInt32 width;
            public bool do_rectify;

            public RegionOfInterest ()
            {
                x_offset = 0;
                y_offset = 0;
                height = 0;
                width = 0;
                do_rectify = false;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "x_offset: " + Convert.ToString(x_offset) + "\n";
                string_rep += "y_offset: " + Convert.ToString(y_offset) + "\n";
                string_rep += "height: " + Convert.ToString(height) + "\n";
                string_rep += "width: " + Convert.ToString(width) + "\n";
                string_rep += "do_rectify: " + Convert.ToString(do_rectify) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] x_offset_bytes = BitConverter.GetBytes(x_offset);
                stream.Write(x_offset_bytes, 0, x_offset_bytes.Length);
                System.Byte[] y_offset_bytes = BitConverter.GetBytes(y_offset);
                stream.Write(y_offset_bytes, 0, y_offset_bytes.Length);
                System.Byte[] height_bytes = BitConverter.GetBytes(height);
                stream.Write(height_bytes, 0, height_bytes.Length);
                System.Byte[] width_bytes = BitConverter.GetBytes(width);
                stream.Write(width_bytes, 0, width_bytes.Length);
                System.Byte[] do_rectify_bytes = BitConverter.GetBytes(do_rectify);
                stream.Write(do_rectify_bytes, 0, do_rectify_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                x_offset = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(x_offset).Length;
                y_offset = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(y_offset).Length;
                height = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(height).Length;
                width = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(width).Length;
                do_rectify = Convert.ToBoolean(serialized[curIndex]);
                curIndex++;
                return (curIndex - startIndex);
            }

        }
    }
}
