using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace trajectory_msgs
    {
        public class JointTrajectoryPoint : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "JointTrajectoryPoint";
            public readonly string md5sum = "84fd2dcf68773c3dc0e9db894f4e8b40";
            public List<double> positions;
            public List<double> velocities;
            public List<double> accelerations;
            public ROS_CS.Core.Duration time_from_start;

            public JointTrajectoryPoint ()
            {
                positions = new List<double>();
                velocities = new List<double>();
                accelerations = new List<double>();
                time_from_start = new ROS_CS.Core.Duration();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "positions:\n[";
                foreach (double element in positions)
                {
                    string_rep += " " + Convert.ToString(element);
                }
                string_rep += "]\n\n";
                string_rep += "velocities:\n[";
                foreach (double element in velocities)
                {
                    string_rep += " " + Convert.ToString(element);
                }
                string_rep += "]\n\n";
                string_rep += "accelerations:\n[";
                foreach (double element in accelerations)
                {
                    string_rep += " " + Convert.ToString(element);
                }
                string_rep += "]\n\n";
                string_rep += time_from_start.ToStringRaw() + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] positions_len_bytes = BitConverter.GetBytes((System.UInt32)positions.Count);
                stream.Write(positions_len_bytes, 0, positions_len_bytes.Length);
                foreach(double element in positions)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
                System.Byte[] velocities_len_bytes = BitConverter.GetBytes((System.UInt32)velocities.Count);
                stream.Write(velocities_len_bytes, 0, velocities_len_bytes.Length);
                foreach(double element in velocities)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
                System.Byte[] accelerations_len_bytes = BitConverter.GetBytes((System.UInt32)accelerations.Count);
                stream.Write(accelerations_len_bytes, 0, accelerations_len_bytes.Length);
                foreach(double element in accelerations)
                {
                    System.Byte[] element_bytes = BitConverter.GetBytes(element);
                    stream.Write(element_bytes, 0, element_bytes.Length);
                }
                time_from_start.Serialize(stream);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                System.UInt32 positions_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(positions_len).Length;
                for (int i = 0; i < (int)positions_len; i++)
                {
                    double element = BitConverter.ToDouble(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(element).Length;
                    positions.Add(element);
                }
                System.UInt32 velocities_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(velocities_len).Length;
                for (int i = 0; i < (int)velocities_len; i++)
                {
                    double element = BitConverter.ToDouble(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(element).Length;
                    velocities.Add(element);
                }
                System.UInt32 accelerations_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(accelerations_len).Length;
                for (int i = 0; i < (int)accelerations_len; i++)
                {
                    double element = BitConverter.ToDouble(serialized, curIndex);
                    curIndex += BitConverter.GetBytes(element).Length;
                    accelerations.Add(element);
                }
                curIndex += time_from_start.Deserialize(serialized, curIndex);
                return (curIndex - startIndex);
            }

        }
    }
}
