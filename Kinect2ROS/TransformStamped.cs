using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace geometry_msgs
    {
        public class TransformStamped : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "TransformStamped";
            public readonly string md5sum = "b5764a33bfeb3588febc2682852579b0";
            public std_msgs.Header header;
            public string child_frame_id;
            public geometry_msgs.Transform transform;

            public TransformStamped ()
            {
                header = new std_msgs.Header();
                child_frame_id = "";
                transform = new geometry_msgs.Transform();
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "child_frame_id: " + child_frame_id + "\n";
                string_rep += transform.ToStringRaw() + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] child_frame_id_bytes = System.Text.Encoding.UTF8.GetBytes(child_frame_id);
                System.Byte[] child_frame_id_len_bytes = BitConverter.GetBytes((System.UInt32)child_frame_id_bytes.Length);
                stream.Write(child_frame_id_len_bytes, 0, child_frame_id_len_bytes.Length);
                stream.Write(child_frame_id_bytes, 0, child_frame_id_bytes.Length);
                transform.Serialize(stream);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                System.UInt32 child_frame_id_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(child_frame_id_len).Length;
                child_frame_id = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)child_frame_id_len);
                curIndex += (int)child_frame_id_len;
                curIndex += transform.Deserialize(serialized, curIndex);
                return (curIndex - startIndex);
            }

        }
    }
}
