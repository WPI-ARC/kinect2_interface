using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class FluidPressure : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "FluidPressure";
            public readonly string md5sum = "804dc5cea1c5306d6a2eb80b9833befe";
            public std_msgs.Header header;
            public double fluid_pressure;
            public double variance;

            public FluidPressure ()
            {
                header = new std_msgs.Header();
                fluid_pressure = 0.0;
                variance = 0.0;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += header.ToStringRaw() + "\n";
                string_rep += "fluid_pressure: " + Convert.ToString(fluid_pressure) + "\n";
                string_rep += "variance: " + Convert.ToString(variance) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                header.Serialize(stream);
                System.Byte[] fluid_pressure_bytes = BitConverter.GetBytes(fluid_pressure);
                stream.Write(fluid_pressure_bytes, 0, fluid_pressure_bytes.Length);
                System.Byte[] variance_bytes = BitConverter.GetBytes(variance);
                stream.Write(variance_bytes, 0, variance_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                curIndex += header.Deserialize(serialized, curIndex);
                fluid_pressure = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(fluid_pressure).Length;
                variance = BitConverter.ToDouble(serialized, curIndex);
                curIndex += BitConverter.GetBytes(variance).Length;
                return (curIndex - startIndex);
            }

        }
    }
}
