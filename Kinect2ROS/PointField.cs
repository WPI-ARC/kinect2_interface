using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

//////////////////////////////////////////////////
/////    AUTOGENERATED MESSAGE DEFINITION    /////
//////////////////////////////////////////////////
/////         DO NOT MODIFY BY HAND!         /////
//////////////////////////////////////////////////

namespace ROS_CS
{
    namespace sensor_msgs
    {
        public class PointField : ROS_CS.Core.BaseMessage
        {
            public readonly string typeID = "PointField";
            public readonly string md5sum = "268eacb2962780ceac86cbd17e328150";
            public readonly System.Byte INT8 = 1;
            public readonly System.Byte UINT8 = 2;
            public readonly System.Byte INT16 = 3;
            public readonly System.Byte UINT16 = 4;
            public readonly System.Byte INT32 = 5;
            public readonly System.Byte UINT32 = 6;
            public readonly System.Byte FLOAT32 = 7;
            public readonly System.Byte FLOAT64 = 8;
            public string name;
            public System.UInt32 offset;
            public System.Byte datatype;
            public System.UInt32 count;

            public PointField ()
            {
                name = "";
                offset = 0;
                datatype = 0;
                count = 0;
            }

            public override string ToString ()
            {
                return ROS_CS.Core.PrettyPrinter.PrettyPrint(ToStringRaw());
            }

            public override string ToStringRaw ()
            {
                string string_rep = typeID + ":\n";
                string_rep += "name: " + name + "\n";
                string_rep += "offset: " + Convert.ToString(offset) + "\n";
                string_rep += "datatype: " + Convert.ToString(datatype) + "\n";
                string_rep += "count: " + Convert.ToString(count) + "\n";
                return string_rep;
            }

            public override void Serialize(MemoryStream stream)
            {
                System.Byte[] name_bytes = System.Text.Encoding.UTF8.GetBytes(name);
                System.Byte[] name_len_bytes = BitConverter.GetBytes((System.UInt32)name_bytes.Length);
                stream.Write(name_len_bytes, 0, name_len_bytes.Length);
                stream.Write(name_bytes, 0, name_bytes.Length);
                System.Byte[] offset_bytes = BitConverter.GetBytes(offset);
                stream.Write(offset_bytes, 0, offset_bytes.Length);
                System.Byte[] datatype_bytes = new System.Byte[] {datatype};
                stream.Write(datatype_bytes, 0, datatype_bytes.Length);
                System.Byte[] count_bytes = BitConverter.GetBytes(count);
                stream.Write(count_bytes, 0, count_bytes.Length);
            }

            public override int Deserialize(System.Byte[] serialized)
            {
                return Deserialize(serialized, 0);
            }

            public override int Deserialize(System.Byte[] serialized, int startIndex)
            {
                int curIndex = startIndex;
                System.UInt32 name_len = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(name_len).Length;
                name = System.Text.Encoding.UTF8.GetString(serialized, curIndex, (int)name_len);
                curIndex += (int)name_len;
                offset = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(offset).Length;
                datatype = serialized[curIndex];
                curIndex++;
                count = BitConverter.ToUInt32(serialized, curIndex);
                curIndex += BitConverter.GetBytes(count).Length;
                return (curIndex - startIndex);
            }

        }
    }
}
